Kunyuan Zhang UIN:927001520
part1_spec.rb

def sum arr
  # YOUR CODE HERE
  arr.inject(0, :+)
end

def max_2_sum arr
  # YOUR CODE HERE
  sum(arr.sort.last(2))
end

def sum_to_n? arr, n
  # YOUR CODE HERE
    if array.empty?
      return false
    else
      while member = array.pop do
        return true if array.member?(n - member)
      end
      return falsegit
    end
end



part2_spec.rb

def hello(name)
  # YOUR CODE HERE
  return 'Hello, '+ name
end

def starts_with_consonant? s
  # YOUR CODE HERE
  if s =~ /^[bcdfhjklmnpqrstvwxyzBCDFHJKLMNPQRSTVWXYZ]/
    return true
  else
    return false
  end
end

def binary_multiple_of_4? s
  # YOUR CODE HERE
  if str =~ /[^01]/
    return false
  else
    return str =~/(00|0)$/
  end
end


part3_spec.rb

class BookInStock
# YOUR CODE HERE
attr_accessor :isbn, :price
  def initialize isbn, price
    raise ArgumentError if price <= 0 || isbn.empty?
    @isbn = isbn
    @price = price
  end
  
  def price_as_string
    format("$%.2f",@price)
  end
end


Log part:

Ruby intro part 1
  #sum
    should be defined
    returns correct sum [20 points]
    works on the empty array [10 points]
  #max_2_sum
    should be defined
    returns the correct sum [7 points]
    works even if 2 largest values are the same [3 points]
    returns zero if array is empty [10 points]
    returns value of the element if just one element [10 points]
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points]
    returns false for any single element array [5 points]
    returns false for an empty array [5 points]

#hello
  should be defined
  The hello method returns the correct string [30 points]

#starts_with_consonant?
  should be defined
  classifies true cases [10 points]
  classifies false cases [10 points]
  works on the empty string [5 points]
  works on nonletters [5 points]

#binary_multiple_of_4?
  should be defined
  classifies valid binary numbers [30 points]
  rejects invalid binary numbers [10 points]

BookInStock
  should be defined
  getters and setters
    should set ISBN [10 points]
    should set price [10 points]
    should be able to change ISBN [10 points]
    should be able to change price [10 points]
  constructor
    should reject invalid ISBN number [10 points]
    should reject zero price [10 points]
    should reject negative price [10 points]
  #price_as_string
    should be defined
    should display 33.95 as "$33.95" [10 points]
    should display 1.1 as $1.10 [10 points]
    should display 20 as $20.00 [10 points]

Finished in 0.02641 seconds (files took 0.09499 seconds to load)
34 examples, 0 failures

